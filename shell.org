* Shell
** The Unix Command Line
- This course uses the unix command line /shell/ a lot and it's the
  de-facto interface to high performance computers
- We'll use `ssh` to access a shell on a remote supercomputer
- You can choose you favourite shell, all our examples use /bash/
- The next magic cell sets up the environment and directories etc in a
  directory =training/tmp= in your home directory. It will be totally
  wiped in the process: if you run this outside the training accounts
  of this course, please be careful.
#+BEGIN_SRC bash
cd
rm -rf ${HOME}/training/tmp
mkdir -p ${HOME}/training/tmp
cd ${HOME}/training/tmp
for x in 0 1 2 3 4 5 6 7 8 9
do
  touch examplefile$x
done
for x in 0 1 2 3
do
  mkdir exampledirectory$x
done
touch exampledirectory1/examplefileA .hiddenexample1
echo "Text in a file" > examplefile3
echo DONE.
#+END_SRC

** Shell, part 1: The First Commands
*** Listing files and directories
- produce a simple, locale sorted list of files
#+begin_src bash
ls
#+end_src
- list "hidden" files, too
#+BEGIN_SRC bash
ls -a
#+END_SRC
- give detailed information (we'll learn to interpret it later)
#+BEGIN_SRC bash
ls -l
#+END_SRC
- list only =examplefile1= and the contents of =exampledirectory1= directory
#+BEGIN_SRC bash
ls -l examplefile1 exampledirectory1
#+END_SRC
- a full usage help; works with almost all commands
#+BEGIN_SRC bash
ls --help
#+END_SRC
- When you need to operate on lots of files, use /glob patterns/ like this
#+BEGIN_SRC bash
echo example*
#+END_SRC
#+BEGIN_SRC bash
echo examplefile[0-8]
#+END_SRC
- Do yourself a favour and avoid "special" characters in filenames: TODO!!! =()[]{} &*$?\|#'"`=
- Yes, that is a space in there!
- All of these work if you /escape/ them correctly, but it is complicated:
#+BEGIN_SRC bash
touch horriblen\ame1 horriblen\\ame2 horrible\\name3 horri\\blename4 horrible\ example5
#+END_SRC
- and it gets even worse if you try to write a script and process this programmatically
- besides =\= can give you nasty surprises:
#+BEGIN_SRC bash
ls horr*
#+END_SRC
- oops...
#+BEGIN_SRC bash
rm horrible\name3 horrible example5
#+END_SRC
- but only =/= is really forbidden in file names: you just cannot have
  it in a file name
*** Making Directories
- directory is just a special type file
  - initially a directory is like an empty file
  - creating one is equally simple
#+BEGIN_SRC bash
mkdir exampledirectory10
#+END_SRC
- there are other kinds of special files, too: /sockets/, /device nodes/, /symbolic links/, etc
*** Changing to a different Directory
Go to directory called =exampledirectory1=
#+BEGIN_SRC bash
cd exampledirectory1
#+END_SRC
- and back to where you were
#+BEGIN_SRC bash
cd ..
#+END_SRC
- that =..= refers to the directory containing current directory
- current directory is referred to with =.=
  - hence =..= and =./..= are the same thing
** Shell, part 2: Managing Directories and Files
*** the directory tree
- image of dirtree TODO!!!
- where are we in the tree?
#+BEGIN_SRC bash
pwd
#+END_SRC
*** Copying Files
- copy =examplefile1= to =examplefile11=
#+BEGIN_SRC bash
cp examplefile1 examplefile11
#+END_SRC
- and =examplefile1= to =exampledirectory2/= with its original name
#+BEGIN_SRC bash
cp examplefile1 exampledirectory2/
#+END_SRC
- or with a new name
#+BEGIN_SRC bash
cp examplefile1 exampledirectory2/newname
#+END_SRC
- this is equivalent to move followed by copy or vice versa (but has
  different semantics)
- a more sophisticated copying tool is called /rsync/
#+BEGIN_SRC bash
rsync -a exampledirectory2/ exampledirectory12/
#+END_SRC
  - limitation: the above can only create one directory level,
    i.e. =rsync -a exampledirectory2/ exampledirectory12/exampledirectory13/= will fail
*** Moving Files
- just like copying
#+BEGIN_SRC bash
mv examplefile11 exampledirectory3/
#+END_SRC
- let's move it back to current directory but with a new name
#+BEGIN_SRC bash
mv exampledirectory3/examplefile11 ./newname
#+END_SRC
- remember, directories are files, so can =cp=, =rsync=, =mv=
  directories just as well as files
- but be careful: =cp|mv|rsync directory dest= behaves differently
  depending on whether =dest= exists or not
- be extra careful: all these commands overwrite destinations without
  warning
*** Removing Files and directories
- remove a file
#+BEGIN_SRC bash
rm examplefile9
#+END_SRC
- but directories cannot be removed unless they are empty
#+BEGIN_SRC bash
rmdir exampledirectory1
#+END_SRC
- so remove the contents first
#+BEGIN_SRC bash
rm exampledirectory1/*
rmdir exampledirectory1
#+END_SRC
- there is a way to do this with one command, but people have removed
  all their files with it by accident...
** Shell, part 3: Working with Files from the Command Line
*** Displaying the contents of a file on the screen
- for small files 
#+BEGIN_SRC bash
cat examplefile3
#+END_SRC
- but this is not useful for big files as they'll scroll off the
  screen, better one is =less examplefile3= or =more examplefile3= if
  =less= is unavailable
*** Searching the contents of a file
- find "This" from a =examplefile3=
#+BEGIN_SRC bash
grep -E "This" examplefile3
#+END_SRC
- or use a /regular expression/ or /regex/ to match any string with
  capital "T" followed after any number (including zero) characters by
  "s"
#+BEGIN_SRC bash
grep -E "T.*s" examplefile3
#+END_SRC
- or "T" followed ... by "x"
#+BEGIN_SRC bash
grep -E "T.*x" examplefile3
#+END_SRC
- =man grep= for more details on what a =regex= is
*** STDIO and friends
- It is often useful to capture the output of a program or send input
  programmatically to a program: redirection!
- all programs have three non-seekable files open: standard input
  where user types in, standard output where program writes normal
  output, and standard error where program is supposed to write error
  messages
- normally called /stdin/, /stdout/ and /stderr/
- redirect stdout with ">"
#+BEGIN_SRC bash
ls > examplefile12
#+END_SRC
- no output: it went to =examplefile2=:
#+BEGIN_SRC bash
cat examplefile12
#+END_SRC
- can also redirect stdin to a file using redirection: this provides
  input to =grep example= from a file
#+BEGIN_SRC bash
grep example < examplefile12
grep directory < examplefile12
#+END_SRC
- Can also combine these without going via files: /pipes/; note that
  the following only "pipes" stdout
#+BEGIN_SRC bash
ls | grep example
#+END_SRC
- A more complicated case with stderr ("2>") redirected to =/dev/null=
  (a black hole):
#+BEGIN_SRC bash
ls i_do_not_exist examplefile1 2> /dev/null | grep example
#+END_SRC
- now errors go to where stdout goes ("&1" means "same as stdout")
#+BEGIN_SRC bash
ls i_do_not_exist examplefile1 2>&1 | grep file
#+END_SRC
- can also swap them around: now stderr is redirected to stdout (2>&1)
  but stdout is then redirected to =/dev/null= ("1>/dev/null"), so pipe
  ("|") only gets stderr now
#+BEGIN_SRC bash
ls i_do_not_exist examplefile1 2>&1 1>/dev/null | grep file
#+END_SRC
- order matters: this sends everything to =/dev/null=
#+BEGIN_SRC bash
ls i_do_not_exist examplefile1 1>/dev/null 2>&1 | grep file
#+END_SRC
** Shell, part 4: Permissions, Processes, and the Environment
*** Securing your files
- Basic permissions are for /owner/, /group/, /other/.
- =r= means read, =w= write, =x= execute (or "change into" for directories)
#+BEGIN_SRC bash
ls -la
#+END_SRC
- Careful! Prmissions on directory control new file creation and
  deletion, so can "steal" files! (Just demonstrating the sequence,
  the original file is already owned by the training user.)
#+BEGIN_SRC bash
mv examplefile3 3elifelpmaxe
cat 3elifelpmaxe > examplefile3
rm 3elifelpmaxe
#+END_SRC
- For shared directories, use =getfacl= and =setfacl= but they have
  limitations: only files originally created in the directory inherit
  the ACL, files moved there from elsewhere will need further action.
- ACLs are the only practical way of setting up shared directories
- Give group =users= read access and user =z300= read-write access to
  =exampledirectory3= and make sure subsequent files and directories
  created there have similar permissions:
#+BEGIN_SRC bash
setfacl --default --modify u::rw exampledirectory3
setfacl --default --modify g::r exampledirectory3
setfacl --modify u:z300:rw exampledirectory3
setfacl --modify g:users:r exampledirectory3
#+END_SRC
*** Managing processes
- list your own processes controlled by current (pseudo) terminal
#+BEGIN_SRC bash
ps
#+END_SRC
- or list all processes and threads
#+BEGIN_SRC bash
ps -elfyL
#+END_SRC
- or processes in a parent-child tree
#+BEGIN_SRC bash
ps -eflyH
#+END_SRC
- another way to print the tree; fancy, but not very useful compared to above
#+BEGIN_SRC bash
pstree
#+END_SRC
- two interactive views of processes, including their CPU utilisation 
#+BEGIN_SRC bash
top -b -n1
#+END_SRC
- there is also =htop= on most modern machines
- You can execute processes "in the background"
#+BEGIN_SRC bash
sleep 7 &
sleep 5 & kill -SIGSTOP $!
sleep 3
echo 'in a real terminal you could stop a process with C-z and then check what you have in the background (either running or stopped)'
jobs -l
echo 'transfer a process to background'
bg 2
echo 'check it'
jobs -l
echo 'and move one back to the foreground'
fg 1
echo 'normally you get rid of the foreground process with C-c but now we just waited'
#+END_SRC
- Primitive communication between processes is done using /signals/
#+BEGIN_SRC bash
jobs -l
wait
sleep 72 &
sleep 36 &
sleep 3 &
echo 'Send SIGSTOP to the second one'
kill -SIGSTOP %2
echo 'Check what happened.'
jobs -l
echo 'Send SIGTERM to the first process'
kill -SIGTERM %1
echo 'Check'
jobs -l
echo 'Ok, so now it had terminated. Send SIGKILL to the second process'
kill -SIGKILL %2
echo 'Check'
echo 'Wait for %3 to finish'
jobs -l
wait
#+END_SRC
- the notorius segmentation fault or segmentation violation or
  segfault for short causes the kernel to send the =SIGSEGV= signal to
  the offending process
- some batch job systems on supercomputers will send =SIGUSR1=,
  =SIGUSR2=, =SIGXCPU= or =SIGTERM= when your job is about to run out of its
  allocated time slot
- COSMOS will send =SIGTERM= first, followed by =SIGKILL= if you don't quit peacefully
*** Shell startup and environment
- When you log in, =bash= will execute several /script/ files; basically lists of commands
  - system startup files
  - personal ones in =~/.bash_profile= (login sessions) or =~/.bashrc= (other sessions)
  - edit as you see fit, but be careful: mistakes can lead to inability to log in!
- /Environment variables/ control how =bash= behaves; most important ones are
  - =PATH= :: list of colon-separated directory names to look, in order, for commands typed in the prompt
  - =HOME= :: your home directory, also available as --- under certain conditions 
- Useful UNIX commands 
  - check the value of a variable PATH
#+BEGIN_SRC bash
echo ${PATH}
#+END_SRC
  - check where (in =PATH=) command =ls= lives
#+BEGIN_SRC bash
which ls
#+END_SRC
  - easiest way to give a long list of parameters to a program
#+BEGIN_SRC bash
find exampledirectory12 -name 'example*1' -print0 |xargs -0 ls -l
#+END_SRC
** Examples / Practicals / Exercises (these go to cookbook, too)
- Remove file called =foo bar=.
- Remove file called =-rf=.
- Remove file called =nasty $SHELL=,
- Remove LaTeX compilation by-products (i.e. files ending in =.log=
  and =.aux=) in a directory hierarchy which is 10 levels deep (hint:
  =find=).
- List all executable files in the current directory, including "hidden" ones.
- List of directories in the current directory.
- Write a shell script which outputs "=filename= is older" if
  =filename= is older than your =~/.bashrc= and "=filename= is newer"
  it it is not older.
- Create yourself an ssh private-public-keypair and set up key based
  authentication with your training account on
  =microcosm.damtp.cam.ac.uk=.
- You should pick one and learn the tricks of at least one text-editor
  to make your life easier on the terminal. This course does not cover
  that but popular choices are =emacs= and =vim=; emacs has a good
  built-in tutorial which you can easily access the first time you
  start it.
*** Further resources
    [[link][here for example]]
** The Compiler
- what is it
- why need one
- examples, with last one taking forever to compile because the file
  is so big (but no -ipo as that will take long even with modular
  code): how to sort that out
  
  ** Appendix I: Key Commands
  | =ls= | list the contents of the current directory|
  | =cd= | changes the directory to that specified, i.e. =cd subdir= changes to subdir|
  | =cp=/=mv= | copy/mv a file or directory (needs -r for cp) to specified location|
  | =rm= | removes a file/directory (with -r)|
  | =mkdir | creates a new directory|
  | =ssh= | log into a remote machine |
  | =scp=/=rsync= | copies files from a remote machine. =rsync= should be prefered|
  | =echo= | prints a variable to screen |
  | =git= | version control software (not the only one) |
  | =chmod= | changes the permisions (who can read/modify/execute) on a file |
  | =sed=/=grep=/=awk= | file search and manipulation commands, (see their man pages) |
  | =man= | brings up the manual for a given command, can often also be done by appending =--help= to the command |
  
  -For Mac:
  | =open= | opens a file with whichever program has been set up as the default for that file (e.g. =open a.pdf= opens a pdf in the default pdf viewer) |
